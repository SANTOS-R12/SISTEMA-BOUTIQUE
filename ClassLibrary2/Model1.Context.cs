//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class boutiqueEntities : DbContext
    {
        public boutiqueEntities()
            : base("name=boutiqueEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<categoria> categoria { get; set; }
        public DbSet<cliente> cliente { get; set; }
        public DbSet<pedido> pedido { get; set; }
        public DbSet<producto> producto { get; set; }
        public DbSet<proveedor> proveedor { get; set; }
        public DbSet<roles> roles { get; set; }
        public DbSet<saldo_P> saldo_P { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<usuario> usuario { get; set; }
        public DbSet<venta> venta { get; set; }
    
        public virtual int DELETE_CATEGORIA(Nullable<int> id_categoria, string nombre, string descripcion)
        {
            var id_categoriaParameter = id_categoria.HasValue ?
                new ObjectParameter("id_categoria", id_categoria) :
                new ObjectParameter("id_categoria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_CATEGORIA", id_categoriaParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int DELETE_CLIENTE(Nullable<int> dui, string nombre, string apellido, string direccion, string telefono, Nullable<int> id_saldop)
        {
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var id_saldopParameter = id_saldop.HasValue ?
                new ObjectParameter("id_saldop", id_saldop) :
                new ObjectParameter("id_saldop", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_CLIENTE", duiParameter, nombreParameter, apellidoParameter, direccionParameter, telefonoParameter, id_saldopParameter);
        }
    
        public virtual int DELETE_PEDIDO(Nullable<int> id_pedido, Nullable<System.DateTime> fecha, string detalle, Nullable<decimal> precio, Nullable<int> cantidad, Nullable<int> id_proveedor)
        {
            var id_pedidoParameter = id_pedido.HasValue ?
                new ObjectParameter("id_pedido", id_pedido) :
                new ObjectParameter("id_pedido", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_proveedorParameter = id_proveedor.HasValue ?
                new ObjectParameter("id_proveedor", id_proveedor) :
                new ObjectParameter("id_proveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_PEDIDO", id_pedidoParameter, fechaParameter, detalleParameter, precioParameter, cantidadParameter, id_proveedorParameter);
        }
    
        public virtual int DELETE_PRODUCTO(Nullable<int> id_producto, Nullable<decimal> precio, string descripcion, Nullable<int> cantidad, Nullable<int> id_categoria)
        {
            var id_productoParameter = id_producto.HasValue ?
                new ObjectParameter("id_producto", id_producto) :
                new ObjectParameter("id_producto", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_categoriaParameter = id_categoria.HasValue ?
                new ObjectParameter("id_categoria", id_categoria) :
                new ObjectParameter("id_categoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_PRODUCTO", id_productoParameter, precioParameter, descripcionParameter, cantidadParameter, id_categoriaParameter);
        }
    
        public virtual int DELETE_PROVEEDOR(Nullable<int> id_proveedor, string nombre, string apellido, string direccion, string telefono)
        {
            var id_proveedorParameter = id_proveedor.HasValue ?
                new ObjectParameter("id_proveedor", id_proveedor) :
                new ObjectParameter("id_proveedor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_PROVEEDOR", id_proveedorParameter, nombreParameter, apellidoParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int DELETE_ROLES(Nullable<int> id_rol, string rol)
        {
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_ROLES", id_rolParameter, rolParameter);
        }
    
        public virtual int DELETE_SALDOP(Nullable<int> id_saldop, Nullable<decimal> importe, Nullable<decimal> cobrado, Nullable<decimal> pendiente)
        {
            var id_saldopParameter = id_saldop.HasValue ?
                new ObjectParameter("id_saldop", id_saldop) :
                new ObjectParameter("id_saldop", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(decimal));
    
            var cobradoParameter = cobrado.HasValue ?
                new ObjectParameter("cobrado", cobrado) :
                new ObjectParameter("cobrado", typeof(decimal));
    
            var pendienteParameter = pendiente.HasValue ?
                new ObjectParameter("pendiente", pendiente) :
                new ObjectParameter("pendiente", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_SALDOP", id_saldopParameter, importeParameter, cobradoParameter, pendienteParameter);
        }
    
        public virtual int DELETE_USUARIO(Nullable<int> id_usuario, string nombre, string clave, Nullable<int> id_rol)
        {
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_USUARIO", id_usuarioParameter, nombreParameter, claveParameter, id_rolParameter);
        }
    
        public virtual int DELETE_VENTA(Nullable<int> id_venta, Nullable<System.DateTime> fecha, Nullable<int> cantidad, Nullable<decimal> total_venta, Nullable<int> dui, Nullable<int> id_usuario)
        {
            var id_ventaParameter = id_venta.HasValue ?
                new ObjectParameter("id_venta", id_venta) :
                new ObjectParameter("id_venta", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var total_ventaParameter = total_venta.HasValue ?
                new ObjectParameter("total_venta", total_venta) :
                new ObjectParameter("total_venta", typeof(decimal));
    
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_VENTA", id_ventaParameter, fechaParameter, cantidadParameter, total_ventaParameter, duiParameter, id_usuarioParameter);
        }
    
        public virtual int INSERTAR_CATEGORIA(string nombre, string descripcion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_CATEGORIA", nombreParameter, descripcionParameter);
        }
    
        public virtual int INSERTAR_CLIENTE(Nullable<int> dui, string nombre, string apellido, string direccion, string telefono, Nullable<int> id_saldop)
        {
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var id_saldopParameter = id_saldop.HasValue ?
                new ObjectParameter("id_saldop", id_saldop) :
                new ObjectParameter("id_saldop", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_CLIENTE", duiParameter, nombreParameter, apellidoParameter, direccionParameter, telefonoParameter, id_saldopParameter);
        }
    
        public virtual int INSERTAR_PEDIDO(Nullable<System.DateTime> fecha, string detalle, Nullable<decimal> precio, Nullable<int> cantidad, Nullable<int> id_proveedor)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_proveedorParameter = id_proveedor.HasValue ?
                new ObjectParameter("id_proveedor", id_proveedor) :
                new ObjectParameter("id_proveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_PEDIDO", fechaParameter, detalleParameter, precioParameter, cantidadParameter, id_proveedorParameter);
        }
    
        public virtual int INSERTAR_PRODUCTO(Nullable<decimal> precio, Nullable<int> cantidad, Nullable<int> id_categoria)
        {
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_categoriaParameter = id_categoria.HasValue ?
                new ObjectParameter("id_categoria", id_categoria) :
                new ObjectParameter("id_categoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_PRODUCTO", precioParameter, cantidadParameter, id_categoriaParameter);
        }
    
        public virtual int INSERTAR_PROVEEDOR(string nombre, string apellido, string direccion, string telefono)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_PROVEEDOR", nombreParameter, apellidoParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int INSERTAR_ROLES(Nullable<int> rol)
        {
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_ROLES", rolParameter);
        }
    
        public virtual int INSERTAR_saldoP(Nullable<decimal> importe, Nullable<decimal> cobrado, Nullable<decimal> pendiente)
        {
            var importeParameter = importe.HasValue ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(decimal));
    
            var cobradoParameter = cobrado.HasValue ?
                new ObjectParameter("cobrado", cobrado) :
                new ObjectParameter("cobrado", typeof(decimal));
    
            var pendienteParameter = pendiente.HasValue ?
                new ObjectParameter("pendiente", pendiente) :
                new ObjectParameter("pendiente", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_saldoP", importeParameter, cobradoParameter, pendienteParameter);
        }
    
        public virtual int INSERTAR_USUARIO(string nombre, string clave, Nullable<int> id_rol)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_USUARIO", nombreParameter, claveParameter, id_rolParameter);
        }
    
        public virtual int INSERTAR_VENTA(Nullable<System.DateTime> fecha, Nullable<int> cantidad, Nullable<decimal> total_venta, Nullable<int> dui, Nullable<int> id_usuario)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var total_ventaParameter = total_venta.HasValue ?
                new ObjectParameter("total_venta", total_venta) :
                new ObjectParameter("total_venta", typeof(decimal));
    
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTAR_VENTA", fechaParameter, cantidadParameter, total_ventaParameter, duiParameter, id_usuarioParameter);
        }
    
        public virtual ObjectResult<SELECT_CATEGORIA_FULL_Result> SELECT_CATEGORIA_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_CATEGORIA_FULL_Result>("SELECT_CATEGORIA_FULL");
        }
    
        public virtual ObjectResult<SELECT_CLIENTE_FULL_Result> SELECT_CLIENTE_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_CLIENTE_FULL_Result>("SELECT_CLIENTE_FULL");
        }
    
        public virtual ObjectResult<SELECT_PEDIDO_FULL_Result> SELECT_PEDIDO_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_PEDIDO_FULL_Result>("SELECT_PEDIDO_FULL");
        }
    
        public virtual ObjectResult<SELECT_pedido_Por_producto_FULL_Result> SELECT_pedido_Por_producto_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_pedido_Por_producto_FULL_Result>("SELECT_pedido_Por_producto_FULL");
        }
    
        public virtual ObjectResult<SELECT_PRODUCTO_FULL_Result> SELECT_PRODUCTO_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_PRODUCTO_FULL_Result>("SELECT_PRODUCTO_FULL");
        }
    
        public virtual ObjectResult<SELECT_producto_Por_Venta_FULL_Result> SELECT_producto_Por_Venta_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_producto_Por_Venta_FULL_Result>("SELECT_producto_Por_Venta_FULL");
        }
    
        public virtual ObjectResult<SELECT_PROVEEDOR_FULL_Result> SELECT_PROVEEDOR_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_PROVEEDOR_FULL_Result>("SELECT_PROVEEDOR_FULL");
        }
    
        public virtual ObjectResult<SELECT_ROLES_FULL_Result> SELECT_ROLES_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_ROLES_FULL_Result>("SELECT_ROLES_FULL");
        }
    
        public virtual ObjectResult<SELECT_saldo_P_FULL_Result> SELECT_saldo_P_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_saldo_P_FULL_Result>("SELECT_saldo_P_FULL");
        }
    
        public virtual ObjectResult<SELECT_USUARIO_FULL_Result> SELECT_USUARIO_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_USUARIO_FULL_Result>("SELECT_USUARIO_FULL");
        }
    
        public virtual ObjectResult<SELECT_VENTA_FULL_Result> SELECT_VENTA_FULL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_VENTA_FULL_Result>("SELECT_VENTA_FULL");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UPDATE_CATEGORIA(Nullable<int> id_categoria, string nombre, string descripcion)
        {
            var id_categoriaParameter = id_categoria.HasValue ?
                new ObjectParameter("id_categoria", id_categoria) :
                new ObjectParameter("id_categoria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_CATEGORIA", id_categoriaParameter, nombreParameter, descripcionParameter);
        }
    
        public virtual int UPDATE_CLIENTE(Nullable<int> dui, string nombre, string apellido, string direccion, string telefono, Nullable<int> id_saldop)
        {
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var id_saldopParameter = id_saldop.HasValue ?
                new ObjectParameter("id_saldop", id_saldop) :
                new ObjectParameter("id_saldop", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_CLIENTE", duiParameter, nombreParameter, apellidoParameter, direccionParameter, telefonoParameter, id_saldopParameter);
        }
    
        public virtual int UPDATE_PEDIDO(Nullable<int> id_pedido, Nullable<System.DateTime> fecha, string detalle, Nullable<decimal> precio, Nullable<int> cantidad, Nullable<int> id_proveedor)
        {
            var id_pedidoParameter = id_pedido.HasValue ?
                new ObjectParameter("id_pedido", id_pedido) :
                new ObjectParameter("id_pedido", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_proveedorParameter = id_proveedor.HasValue ?
                new ObjectParameter("id_proveedor", id_proveedor) :
                new ObjectParameter("id_proveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_PEDIDO", id_pedidoParameter, fechaParameter, detalleParameter, precioParameter, cantidadParameter, id_proveedorParameter);
        }
    
        public virtual int UPDATE_PRODUCTO(Nullable<int> id_producto, Nullable<decimal> precio, string descripcion, Nullable<int> cantidad, Nullable<int> id_categoria)
        {
            var id_productoParameter = id_producto.HasValue ?
                new ObjectParameter("id_producto", id_producto) :
                new ObjectParameter("id_producto", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var id_categoriaParameter = id_categoria.HasValue ?
                new ObjectParameter("id_categoria", id_categoria) :
                new ObjectParameter("id_categoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_PRODUCTO", id_productoParameter, precioParameter, descripcionParameter, cantidadParameter, id_categoriaParameter);
        }
    
        public virtual int UPDATE_PROVEEDOR(Nullable<int> id_proveedor, string nombre, string apellido, string direccion, string telefono)
        {
            var id_proveedorParameter = id_proveedor.HasValue ?
                new ObjectParameter("id_proveedor", id_proveedor) :
                new ObjectParameter("id_proveedor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_PROVEEDOR", id_proveedorParameter, nombreParameter, apellidoParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int UPDATE_ROLES(Nullable<int> id_rol, string rol)
        {
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_ROLES", id_rolParameter, rolParameter);
        }
    
        public virtual int UPDATE_SALDOP(Nullable<int> id_saldop, Nullable<decimal> importe, Nullable<decimal> cobrado, Nullable<decimal> pendiente)
        {
            var id_saldopParameter = id_saldop.HasValue ?
                new ObjectParameter("id_saldop", id_saldop) :
                new ObjectParameter("id_saldop", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(decimal));
    
            var cobradoParameter = cobrado.HasValue ?
                new ObjectParameter("cobrado", cobrado) :
                new ObjectParameter("cobrado", typeof(decimal));
    
            var pendienteParameter = pendiente.HasValue ?
                new ObjectParameter("pendiente", pendiente) :
                new ObjectParameter("pendiente", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_SALDOP", id_saldopParameter, importeParameter, cobradoParameter, pendienteParameter);
        }
    
        public virtual int UPDATE_USUARIO(Nullable<int> id_usuario, string nombre, string clave, Nullable<int> id_rol)
        {
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_USUARIO", id_usuarioParameter, nombreParameter, claveParameter, id_rolParameter);
        }
    
        public virtual int UPDATE_VENTA(Nullable<int> id_venta, Nullable<System.DateTime> fecha, Nullable<int> cantidad, Nullable<decimal> total_venta, Nullable<int> dui, Nullable<int> id_usuario)
        {
            var id_ventaParameter = id_venta.HasValue ?
                new ObjectParameter("id_venta", id_venta) :
                new ObjectParameter("id_venta", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var total_ventaParameter = total_venta.HasValue ?
                new ObjectParameter("total_venta", total_venta) :
                new ObjectParameter("total_venta", typeof(decimal));
    
            var duiParameter = dui.HasValue ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_VENTA", id_ventaParameter, fechaParameter, cantidadParameter, total_ventaParameter, duiParameter, id_usuarioParameter);
        }
    }
}
